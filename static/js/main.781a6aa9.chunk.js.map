{"version":3,"sources":["components/Input.js","components/Bio.js","utils.js","components/Repositories/Repository.js","components/Repositories/index.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["setValue","placeholder","autoloading","useState","str","setString","timeoutRef","useRef","useEffect","clearTimeout","current","setTimeout","type","value","onChange","e","target","onKeyPress","key","onEnterPress","className","user","id","src","avatar_url","alt","name","login","bio","href","html_url","followers","following","location","blog","langColors","months","lang","item","description","language","forkes","license","dateString","date","Date","getDate","getMonth","getFullYear","updated_at","repos","setRepos","page","setPage","repositoriesRef","pagesNum","Math","ceil","public_repos","isFirstPage","isLastPage","onPage","arg","ref","prev","window","scrollTo","offsetTop","fetch","then","res","json","data","map","Repository","node_id","onClick","App","username","setUsername","setUser","err","setErr","status","Error","statusText","catch","Input","Bio","Repositories","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.781a6aa9.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\n\r\nexport default function ({ setValue, placeholder, autoloading }) {\r\n  const [str, setString] = useState('');\r\n  const timeoutRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!autoloading) return;\r\n    clearTimeout(timeoutRef);\r\n    timeoutRef.current = setTimeout(() => setValue(str), 300);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [str])\r\n\r\n  const onEnterPress = (e) => {\r\n    if (e.key === 'Enter' && !autoloading) {\r\n      setValue(str);\r\n      setString('');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={str}\r\n        onChange={e => setString(e.target.value)}\r\n        onKeyPress={e => onEnterPress(e)}\r\n        placeholder={placeholder}\r\n        className=\"search-bar\"\r\n      />\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default function ({ user }) {\r\n  return (\r\n    <div id=\"bio\">\r\n      <div className=\"main-info\">\r\n        <img src={user.avatar_url} alt=\"avatar\" />\r\n        <div className=\"names\">\r\n          <h1>{user.name}</h1>\r\n          <p>{user.login}</p>\r\n        </div>\r\n      </div>\r\n      <p>{user.bio}</p>\r\n      <a href={`${user.html_url}?tab=repositories`}><button>Go to github</button></a>\r\n      <p>{user.followers} followers | {user.following} following</p>\r\n      <p>{user.location}</p>\r\n      <a href={user.blog}><p>{user.blog}</p></a>\r\n    </div>\r\n  )\r\n}","const langColors = {\r\n  \"JavaScript\" : \"yellow\",\r\n  \"CSS\" : 'violet',\r\n  \"TypeScript\" : \"blue\",\r\n  \"HTML\" : \"red\"\r\n}\r\n\r\nexport const getColor = (lang) => langColors[lang] || \"gray\";\r\n\r\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\nexport const getDate = (dateString) => {\r\n  let date = new Date(dateString);\r\n  return `${date.getDate()} ${months[date.getMonth()]} ${date.getFullYear()}`;\r\n};\r\n\r\nexport const scrollToRef = (ref) => window.scrollTo(0, ref.current.offsetTop);","import React from 'react';\r\nimport { getDate, getColor } from '../../utils';\r\n\r\nexport default function ({ item }) {\r\n\r\n  return (\r\n    <li>\r\n      <h1>{item.name}</h1>\r\n      <p>{item.description}</p>\r\n      <div className=\"additional-rep-info\">\r\n        {item.language && \r\n          <div className=\"language\">\r\n            <span className={`language-circle ${getColor(item.language)}`}></span>\r\n            <span>{item.language}</span>\r\n          </div>\r\n        }\r\n        {item.forkes && <span>{item.forkes}</span>}\r\n        {item.license && <span>{item.license.name}</span>}\r\n        <span>Updated on {getDate(item.updated_at)}</span>\r\n      </div>\r\n    </li>\r\n  );\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport Repository from './Repository';\r\nimport { scrollToRef } from '../../utils';\r\n\r\nexport default function ({ user }) {\r\n  const [repos, setRepos] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const repositoriesRef = useRef(null);\r\n\r\n  const pagesNum = Math.ceil(user.public_repos / 10)\r\n  const isFirstPage = () => page === 1;\r\n  const isLastPage = () => page === pagesNum;\r\n\r\n  const onPage = (arg) => {\r\n    if (\r\n      (isFirstPage() && arg === -1) \r\n      || (isLastPage() && arg === 1)\r\n    ) return;\r\n    setPage(prev => prev + arg);\r\n    scrollToRef(repositoriesRef);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.github.com/users/${user.login}/repos?page=${page}&per_page=10`)\r\n     .then(res => res.json())\r\n     .then(data => setRepos(data))\r\n  }, [user, page]);\r\n\r\n  return (\r\n    <div id=\"repositories\" ref={repositoriesRef}>\r\n      <h1>{user.public_repos} public repositories</h1>\r\n      <ul>\r\n        {repos.map(item => <Repository item={item} key={item.node_id}/>)}\r\n      </ul>\r\n      {pagesNum > 1 &&\r\n        <div className=\"buttons-container\">\r\n          <button\r\n            onClick={() => onPage(-1)}\r\n            className={isFirstPage() ? 'disabled' : 'active'}\r\n          >\r\n            Prev\r\n          </button>\r\n          <button\r\n            onClick={() => onPage(1)}\r\n            className={isLastPage() ? 'disabled' : 'active'}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default function () {\r\n  return (\r\n    <h2>Such user has not been found</h2>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Input from './components/Input';\r\nimport Bio from './components/Bio';\r\nimport Repositories from './components/Repositories';\r\nimport Error from './components/Error';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  const [user, setUser] = useState(null);\r\n  const [err, setErr] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!username) return;\r\n    fetch(`https://api.github.com/users/${username}`)\r\n      .then(res => {\r\n        if (res.status === 404) throw Error(res.statusText);\r\n        setErr(false);\r\n        return res.json();\r\n      })\r\n      .then(data => setUser(data))\r\n      .catch(e => {\r\n        setErr(true);\r\n      });\r\n  }, [username]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Input setValue={setUsername} placeholder=\"Type username\" />\r\n      {err && <Error />}\r\n      {user && !err &&\r\n        <div id=\"profile\">\r\n          <Bio user={user} />\r\n          <Repositories user={user} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}